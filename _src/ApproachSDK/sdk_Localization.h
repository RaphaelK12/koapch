#pragma once

//////////////////////////////////////////////////////////////////////////////////////////

typedef int LocIdKey;

//! Represents one-, two-, or four-dimensional numeric vector.
//! \remarks Instances of this class are used mostly to measure and position controls.
struct Metric
{
	typedef int DataType;
	const static size_t DataTypeSize = sizeof DataType;
	const static size_t MaxNumValues = 4;

	int Factor;
	DataType Val1, Val2, Val3, Val4;


	Metric(DataType theVal1 = 0)
		: Factor(1), Val1(theVal1), Val2(0),       Val3(0),       Val4(0)       {}

	Metric(DataType theVal1, DataType theVal2)
		: Factor(2), Val1(theVal1), Val2(theVal2), Val3(0),       Val4(0)       {}

	Metric(DataType theVal1, DataType theVal2, DataType theVal3, DataType theVal4)
		: Factor(4), Val1(theVal1), Val2(theVal2), Val3(theVal3), Val4(theVal4) {}
};

//////////////////////////////////////////////////////////////////////////////////////////////

//! Specifies the type of an auxiliary string contained in a language file
enum SummaryStringID
{
	TITLE,      //!< The title of the language file, i.e. KO Approach US English Localization.
	CREATED_BY, //!< The author of the language file, i.e. Created by KO Software.
	COMMENT     //!< Additional information about the language file.
};

//////////////////////////////////////////////////////////////////////////////////////////////

//! Represents a storage of language-dependent data for KO Approach.
class DECLSPEC_NOVTABLE ILocalization
{
public:
	//! Initializes the storage.
	virtual HRESULT Initialize(const TCHAR * theCurLangID, int theSize_LangID, bool & thePartial) = 0;

	//! Retrieves a string by ID and copies it into the specified buffer.
	//! \param [in] theInID        The hash of the ID of the string, generated by StringUtil::ComputeHash
	//! \param [out] theOutString  The output buffer that receives the string.
	//! \param [in,out] theSize    Initially contains the full size of the buffer.
	//!                            Upon execution, contains the number of characters copied
	//!                            (excluding the null-terminator).
	//! \return  S_OK if the string was successfully copied; otherwise, an COM error value.
	virtual HRESULT GetString(LocIdKey theInID, TCHAR * theOutString, int * theSize) = 0;

	//! Retrieves a numeric vector by ID.
	virtual HRESULT GetMetric(LocIdKey theInID, Metric & theDestMetric) = 0;

	//! Retrieves the locale string for the current localization by copying it into the specified buffer.
	//! \param [out] theOut      The output buffer that receives the localization string.
	//! \param [in,out] theSize  Initially contains the full size of the buffer.
	//!                          Upon execution, contains the number of characters copied
	//!                          (excluding the null-terminator).
	//! \return  S_OK if the localization string was successfully copied; otherwise, an COM error value.
	virtual HRESULT GetLocale(TCHAR * theOut, int * theSize) = 0;

	//! Retrieves an auxiliary string describing the language file.
	virtual HRESULT GetSummaryString(SummaryStringID theID, const TCHAR * theInLocale,
		int theSize_Locale, TCHAR * theOutString, int * theSize_Out) = 0;
};


//////////////////////////////////////////////////////////////////////////////////////////////
// INTERFACE: ILocalizationEventProcessor
//////////////////////////////////////////////////////////////////////////////////////////////

class ILocalizationEventProcessor
{
public:
	virtual void OnLocalizationChanged(ILocalization * theGet,
			const TCHAR * theLocale, int theSize_Locale) = 0;
};


//////////////////////////////////////////////////////////////////////////////////////////////
// INTERFACE: IEnumLocalizationsProcessor
//////////////////////////////////////////////////////////////////////////////////////////////

class IEnumLocalizationsProcessor
{
public:
	virtual void OnLocalizationFound(ILocalization * theGet) = 0;
};


//////////////////////////////////////////////////////////////////////////////////////////////
// INTERFACE: ILocalizationManager
//////////////////////////////////////////////////////////////////////////////////////////////

class DECLSPEC_NOVTABLE ILocalizationManager
{
public:
	//these two are not const methods because the implementation can potentially modify its data
	virtual ILocalization * GetCurrentLocalization() = 0;
	virtual ILocalization * GetDefaultLocalization() = 0;

	virtual HRESULT GetStringSafe(LocIdKey theInID, TCHAR * theOutString, int * theSize) = 0;

	virtual HRESULT GetMetricSafe(LocIdKey theInID, Metric & theDestMetric) = 0;

	virtual HRESULT EnumerateLocalizations(IEnumLocalizationsProcessor * theOut) = 0;

	virtual HRESULT SetCurrentLocale(const TCHAR * theLocale, int theSize) = 0;
};


#define KEYOF(id)    (RCENTRY_##id::Hash)
#define TIPOF(id)    (RCENTRY_##id::TipHash)
#define STRINGOF(id) (#id)
